import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Navbar from './components/Navbar';
import Footer from './components/Footer';
import Home from './pages/Home';
import Services from './pages/Services';
import Contact from './pages/Contact';
import Map from './components/Map'; 
import './App.css';

import { db } from "./firebase/config";
import { get, ref } from "firebase/database";

interface Service {
  id: string; // Change to string if IDs are generated by Firebase
  name: string;
  description: string;
}

const App: React.FC = () => {
  const [services, setServices] = useState<Service[]>([]);

  // Fetch services from Firebase when the component mounts
  const viewAllServices = async () => {
    const dbRef = ref(db, "services");
    const snapshot = await get(dbRef);
    if (snapshot.exists()) {
      const services = snapshot.val();

      const tempServices = Object.keys(services).map((id) => ({
        ...services[id],
        id, // Use the Firebase-generated key as the ID
      }));

      setServices(tempServices);
    } else {
      setServices([]);
    }
  };

  useEffect(() => {
    viewAllServices();
  }, []); // Empty dependency array to run only on mount

  return (
    <Router>
      <div className="app">
        <Navbar />
        <Routes>
          <Route path="/" element={<Home services={services} />} />
          <Route path="/services" element={<Services services={services} setServices={setServices} />} />
          <Route path="/contact" element={<Contact />} />
          <Route path="/map" element={<Map />} />
        </Routes>
        <Footer />
      </div>
    </Router>
  );
}

export default App;
